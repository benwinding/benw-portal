const fs = require("fs");
const path = require("path");
const matter = require("gray-matter");
const { orderBy } = require("lodash");

// Path to the projects mdx src files
const PROJECTS_DIR = path.join(__dirname, "../src/projects");
// Path to the projects.json file
const PROJECTS_TS_TARGET = path.join(__dirname, "../src/projects.generated.ts");

const mdxFileNames = fs.readdirSync(PROJECTS_DIR);

const projectsAll = mdxFileNames.map(fileName => {
  // Remove ".mdx" from file name to get slug
  const slug = fileName.replace(/\.mdx$/, "");

  // Read markdown file as string
  const fullPath = path.join(PROJECTS_DIR, fileName);
  const fileContents = fs.readFileSync(fullPath, "utf8");

  // Use gray-matter to parse the post metadata section
  const matterResult = matter(fileContents);
  return { slug, ...matterResult.data };
});

const projects = orderBy(projectsAll, ["year", "name"], ["desc", "asc"]);

function arrsToUnique(arr) {
  return Array.from(new Set(arr.flat())).sort();
}

const tools = arrsToUnique(projects.map(post => post.tools));
const icons = arrsToUnique(projects.map(post => post.icons));
const tags = arrsToUnique(projects.map(post => post.tags));

function jsonStr(obj) {
  return JSON.stringify(obj, null, 2);
}

const tsFile = `// This file is automatically generated by scripts/gen-projects.js

export const TOOLS = ${jsonStr(tools)} as const;

export const ICONS = ${jsonStr(icons)} as const;

export const TAGS = ${jsonStr(tags)} as const;

export const PROJECTS = ${jsonStr(projects)};
`;

fs.writeFileSync(PROJECTS_TS_TARGET, tsFile);
